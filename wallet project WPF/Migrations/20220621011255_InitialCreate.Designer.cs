// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wallet_project_WPF;

#nullable disable

namespace wallet_project_WPF.Migrations
{
    [DbContext(typeof(WalletContext))]
    [Migration("20220621011255_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.6");

            modelBuilder.Entity("wallet_project_WPF.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("wallet_project_WPF.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("MoneyAmount")
                        .HasColumnType("REAL");

                    b.Property<int?>("WalletId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("date")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("isCycle")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("isIncoming")
                        .HasColumnType("INTEGER");

                    b.HasKey("TransactionId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("wallet_project_WPF.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("wallet_project_WPF.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Balance")
                        .HasColumnType("REAL");

                    b.Property<int>("UserOwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WalletName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("WalletId");

                    b.HasIndex("UserOwnerId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("wallet_project_WPF.Transaction", b =>
                {
                    b.HasOne("wallet_project_WPF.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId");

                    b.HasOne("wallet_project_WPF.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId");

                    b.Navigation("Category");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("wallet_project_WPF.Wallet", b =>
                {
                    b.HasOne("wallet_project_WPF.User", "UserOwner")
                        .WithMany("Wallets")
                        .HasForeignKey("UserOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserOwner");
                });

            modelBuilder.Entity("wallet_project_WPF.Category", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("wallet_project_WPF.User", b =>
                {
                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("wallet_project_WPF.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
